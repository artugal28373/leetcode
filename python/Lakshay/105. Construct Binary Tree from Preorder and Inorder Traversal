# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:

    
    /* 
         pre-order , in-order : 
         root will be first node from pre-oder 
    
         pre : [ 3, 9, 20, 15, 7]
         inorder: [ 9, 3 15, 20, 7]
         inordered_Pos : { 
         
                      9: 0 
                      3: 1
                     15: 2
                     20: 3
                     7: 4
                     .....
                     }
            
         in this tree: 3 root of the tree
           
    initial:
    low: 0
    high: 4
    step 1:
        idx: 0
        root: 3 
        inorder_pos: 1 
        mid: 1
        left: ( step 2, low: 0, high: 0 ) -> ( 9( left: None, right: None))
        right: ( step 3, low: 2, high: 4) ->  ( 20, left: 15, right: 7 ))
        mid + 1: 2 
        high: 4 ( low: 2, high: 4) -> right child of root node 3 
            
        step 2: ( low: 0, high: 0)
            idx: 1
            root: 9
            mid: 0
            left: ( low: 0, high: -1 ) : None
            right: ( low: mid + 1: 1, high: 0 : None
            step 2.1: ( low: 1, high: -1 ) // true base 
            step 2.2:( low: 1, high: 0 )// base true
            return   9 
                   /   \
                  None  None
        
                    
    step 3: ( low: 2, high: 4, call from step: 1 )
        idx: 2
        root: 20
        mid: 3 
        left: ( step 4, low: 2, high -> mid - 1 : 2 ) -> 15
        right: ( step 7, low: 3, high: 4 ) ->  7
                    
                    
        return  20 ( left: 15, right: 7 )
            step: 4 ( low: 2, high: 2) step: 3
            idx: 3
            root: 15
            mid: 2
            left: ( step 5, low: 2, high: 1 ) // base return None
            right: ( step 6, low: -> mid + 1: 3, high: 2 ) // return None
            return 15 ( left: None, right: None)
                    
                    
            step 7( low: 4, high: 4 ) idx: 4
            root: 7
            mid: 4  
            left: ( low: 4, high -> mid - 1: 3 ) // None 
            right: ( low -> mid + 1 : 5, high: 4 ) // None

    */
        
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        idx = 0
        inordered_pos = {}
        for index, value in enumerate(inorder):
            inordered_pos[value] = index

        def dfs(low, high):
            nonlocal idx
            if low > high:
                return None
            root_val = preorder[idx]
            idx += 1
            root = TreeNode(root_val)

            mid = inordered_pos[root_val]
            root.left = dfs( low, mid - 1)
            root.right = dfs( mid + 1, high )
            return root
        return dfs( 0 , len(preorder) - 1 )
            
