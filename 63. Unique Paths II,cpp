class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        long long int row = grid.size();
        long long int column = grid[0].size();
        vector < vector < long long int > > dp( row + 1 , vector < long long int > ( column + 1 ) );
        dp[1][1] = grid[0][0] ? 0 : 1;
        for( int i = 1; i <= row; i++ ) { 

            for( int j = 1; j <= column; j++ ) { 
                if( i == 1 && j == 1 ) continue;
                if( i == 1 && grid[i-1][j-1] == 0 ) { 
                    dp[i][j] = dp[i][j-1];
                } else if( j == 1 && grid[i-1][j-1] == 0 ) { 
                    dp[i][j] = dp[i-1][j];

                } else if( grid[i-1][j-1] == 0 ) { 

                    dp[i][j] = ( dp[i-1][j] + dp[i][j-1]);
                }
               // cout<< dp[i][j];
            }
              //  cout << endl;
        }
        
        return dp[row][column];
    }
};
